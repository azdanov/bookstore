name: 'bookstore'
services:
  # For catalog-service to work, add 127.0.0.1 catalog-service to /etc/hosts
  catalog-service:
    image: azdanov/bookstore-catalog-service
    container_name: catalog-service
    profiles:
      - app
    labels:
      logging: "promtail"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL=jdbc:postgresql://catalog-db:5432/postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SWAGGER_API_GATEWAY_URL=http://api-gateway:8989/catalog
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      catalog-db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m

  # For order-service to work, add 127.0.0.1 order-service to /etc/hosts
  order-service:
    image: azdanov/bookstore-order-service
    container_name: order-service
    profiles:
      - app
    labels:
      logging: "promtail"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ORDERS_CATALOG_SERVICE_URL=http://api-gateway:8989/catalog
      - DB_URL=jdbc:postgresql://orders-db:5432/postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - RABBITMQ_HOST=bookstore-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - OAUTH2_SERVER_URL=http://keycloak:9191
      - SWAGGER_API_GATEWAY_URL=http://api-gateway:8989/orders
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8082:8082"
    restart: unless-stopped
    depends_on:
      orders-db:
        condition: service_healthy
      bookstore-rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m

  notification-service:
    image: azdanov/bookstore-notification-service
    container_name: notification-service
    profiles:
      - app
    labels:
      logging: "promtail"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL=jdbc:postgresql://notifications-db:5432/postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - RABBITMQ_HOST=bookstore-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - MAIL_HOST=mailpit
      - MAIL_PORT=1025
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8083:8083"
    restart: unless-stopped
    depends_on:
      notifications-db:
        condition: service_healthy
      bookstore-rabbitmq:
        condition: service_healthy
      mailpit:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 700m

  # For api-gateway to work, add 127.0.0.1 api-gateway to /etc/hosts
  api-gateway:
    image: azdanov/bookstore-api-gateway
    container_name: api-gateway
    profiles:
      - app
    labels:
      logging: "promtail"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CATALOG_SERVICE_URL=http://catalog-service:8081
      - ORDER_SERVICE_URL=http://order-service:8082
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8989:8989"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 700m

  webapp:
    image: azdanov/bookstore-webapp
    container_name: webapp
    profiles:
      - app
    labels:
      logging: "promtail"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - BOOKSTORE_API_GATEWAY_URL=http://api-gateway:8989
      - OAUTH2_SERVER_URL=http://keycloak:9191
      - MANAGEMENT_TRACING_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8080:8080"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 700m

  catalog-db:
    image: postgres:16-alpine
    container_name: catalog-db
    profiles:
      - infra
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  orders-db:
    image: postgres:16-alpine
    container_name: orders-db
    profiles:
      - infra
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "25432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  bookstore-rabbitmq:
    image: rabbitmq:3.12.11-management
    container_name: bookstore-rabbitmq
    profiles:
      - infra
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 500m

  notifications-db:
    image: postgres:16-alpine
    container_name: notifications-db
    profiles:
      - infra
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "35432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m

  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    profiles:
      - infra
    ports:
      - 8025:8025
      - 1025:1025
    deploy:
      resources:
        limits:
          memory: 100m

  # For Keycloak to work, add 127.0.0.1 keycloak to /etc/hosts
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    profiles:
      - infra
    command: [ 'start-dev', '--import-realm', '--http-port=9191' ]
    container_name: keycloak
    hostname: keycloak
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "9191:9191"
    deploy:
      resources:
        limits:
          memory: 2gb

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml"

  promtail:
    image: grafana/promtail:3.0.0
    container_name: promtail
    profiles:
      - monitoring
    volumes:
      - ./promtail/promtail-docker-config.yml:/etc/promtail/docker-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: "--config.file=/etc/promtail/docker-config.yml"

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    profiles:
      - monitoring
    command: "-config.file=/etc/loki/local-config.yaml"
    ports:
      - "3100:3100"
    depends_on:
      - promtail

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    profiles:
      - monitoring
    command: "-config.file /etc/tempo-config.yml"
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # Zipkin
    volumes:
      - ./tempo/tempo.yml:/etc/tempo-config.yml

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards/
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources/
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

volumes:
  grafana_data: {}
